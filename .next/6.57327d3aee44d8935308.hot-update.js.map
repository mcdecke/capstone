{"version":3,"file":"6.57327d3aee44d8935308.hot-update.js","sources":["webpack:///pages/index.js"],"sourcesContent":["import React, {Component} from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// import web3 from './web3'\n// import Passwords from './components/Passwords'\n// import Encrypt from './components/Encrypt'\n// import Decrypt from './components/Decrypt'\n// import QrCode from './components/QrCode'\n// const bcrypt = require('bcryptjs');\n// const AES = require(\"crypto-js/aes\");\n// const SHA256 = require(\"crypto-js/sha256\");\n// const QRCode = require('qrcode')\n// const canvas = document.getElementById('canvas')\n// const CryptoJS = require(\"crypto-js\")\n\nimport factory from '../src/ethereum/factory.js'\n\nclass App extends Component {\n\n  // state = {\n  //   address: '', //'0x...'\n  //   message: 'Click a button to get started',\n  //   encryptedPasswords: 'encrypted',\n  //   decryptedPasswords: [],\n  //   qrCode: '',\n  //   passwordList: []\n  // }\n  //\n  // //updates eth address and adds qr code\n  // onSubmit = async (event) => {\n  //   event.preventDefault()\n  //   const accounts = await web3.eth.getAccounts();\n  //   const chain = web3.eth.net.getId()\n  //   .then(console.log);\n  //   if (!accounts[0]) {\n  //     this.setState({message: 'Please open metamask'})\n  //   } else {\n  //     this.setState({message: `Your ethereum address is ${accounts[0]}`})\n  //   }\n  //   QRCode.toCanvas(document.getElementById('canvas'), accounts[0], function (error, url) {\n  //     console.log(url);\n  //   })\n  // }\n  //\n  // encrypt = async (event) => {\n  //   event.preventDefault()\n  //   //get elements from form\n  //   const name = document.getElementById('name').value\n  //   const password = document.getElementById('password').value\n  //   const superSecretKey = document.getElementById('privateKey').value\n  //\n  //   //create data from elements\n  //   const data = JSON.stringify(this.state.passwordList)\n  //   const data2 = this.state.passwordList.toString()\n  //\n  //   console.log(data+`+`+data2);\n  //   //create strigified encrypted passwords\n  //   let ciphertext = CryptoJS.AES.encrypt(data, superSecretKey).toString();\n  //   console.log(ciphertext);\n  //   this.setState({encryptedPasswords: ciphertext})\n  // }\n  //\n  // decrypt = async (e) => {\n  //   e.preventDefault()\n  //\n  //   const superSecretKey = document.getElementById('superSecretInput').value\n  //   let ciphertext = document.getElementById('decrypt').value\n  //   console.log(ciphertext);\n  //   console.log(superSecretKey);\n  //   let bytes = CryptoJS.AES.decrypt(ciphertext, superSecretKey);\n  //   console.log(bytes);\n  //   let decryptedData = bytes.toString(CryptoJS.enc.Utf8)\n  //   console.log(decryptedData);\n  //\n  //   this.setState({decryptedPasswords: decryptedData})\n  // }\n  //\n  // addPassword = async(e) => {\n  //   e.preventDefault()\n  //\n  //   const name = document.getElementById('name').value\n  //   const password = document.getElementById('password').value\n  //\n  //   let passwordList = this.state.passwordList;\n  //   passwordList.push({\n  //     name: name,\n  //     password: password\n  //   })\n  //   console.log(passwordList);\n  //   this.setState({passwordList: passwordList})\n  // }\n\n  async componentDidMount(){\n    const passwordBlocks = await factory.methods.getDeployedPasswordBlocks\n\n    console.log(passwordBlocks());\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      HULLO URF\n    </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n// WEBPACK FOOTER //\n// pages/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAGA;AACA;;AADA;AAEA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAvFA;AACA;AAyFA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}